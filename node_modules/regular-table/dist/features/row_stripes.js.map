{"version":3,"sources":["row_stripes.md"],"names":[],"mappings":"AAqDC,MAAA,iBAAA,GAAA,SAAA;AACA,MAAA,gBAAA,GAAA,iBAAA;AAEA,OAAA,MAAA,gBAAA,GAAA,CACA,KADA,EAEA;AACA,EAAA,mBAAA,GAAA,iBADA;AAEA,EAAA,kBAAA,GAAA;AAFA,IAGA,EALA,KAMA;AACA,QAAA,mBAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,KAAA,CAAA,gBAAA,CAAA,4BAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;AAEA,QAAA,IAAA,EAAA;AACA,UAAA,IAAA,CAAA,EAAA,GAAA,CAAA,KAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,kBAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,mBAAA;AACA,OAHA,MAGA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,mBAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,kBAAA;AACA;AACA;AACA,GAbA,CAAA;AAeA,SAAA,MAAA;AACA,IAAA,mBAAA;AACA,IAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,mBAAA;AACA,IAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,kBAAA;AACA,GAJA;AAKA,CA3BA","sourcesContent":["# Row Stripes\n\nAdding row stripes to a table, at its most basic, could be accomplished by\nadding `odd` and `even` css rules to each of the rows in the `<regular-table>`.\nGiven this approach, a user would notice that on `\"scroll\"` the rows don't\nalternate, and the stripes remain fixed. The top-most row would always show the\ndarker `background-color`, and the next row would retain its lighter, even\n`background-color` - repeating for each row and making the striping look\ninconsistent.\n\nBy alternating our css rules based on the oddness or evenness of the first row\nin the data set, we can ensure that the data and stripes style remain consistent\nas the user scrolls the table.\n\n# API\n\n```html\n<regular-table id=\"example_table\"></regular-table>\n```\n\nLets set up by using `dataListener()` from `two_billion_rows` to create a data\nset and then call `setDataListener()` with it. Next we'll call our\n`alternateStripes()` function passing in the `<regular-table>` and then invoke\n`draw()` - checking that the `#stripedRegularTable` exists first. All of this\nwill be invoked on `\"load\"`.\n\n```html\n<script type=\"module\">\n    import { alternateStripes } from \"./row_stripes.js\";\n    import { dataListener } from \"/dist/examples/two_billion_rows.js\";\n\n    window.addEventListener(\"load\", () => {\n        const dl = dataListener(1000, 50);\n        example_table.setDataListener(dl);\n        window.removeStripes = alternateStripes(example_table);\n        example_table.draw();\n    });\n</script>\n```\n\n## `alternateStripes()`\n\nAdding a `StyleListener` to the `<regular-table>` in our `alternateStripes()`\nfunction will ensure that the odd and even styling will alternate depending on\nthe oddness/evenness of the top-most row. We can `getMeta()` from the table and\nadd/remove our `.stipes` and `.reverse-stripes` classes based on the evenness of\nthe `meta.y0` or the `y` index of the viewport origin. We will also make sure to\nreturn a function that removes the style listener (using the return value of\n`addStyleListener()`) and the attached classes for cleanup purposes. Once this\nfunction is called, the stripes will be gone and no longer get applied as the\nuser scrolls - this is because the style listener has been removed.\n\n```javascript\nconst EVEN_STRIPE_CLASS = \"stripes\";\nconst ODD_STRIPE_CLASS = \"reverse-stripes\";\n\nexport const alternateStripes = (\n    table,\n    {\n        evenStripeClassName = EVEN_STRIPE_CLASS,\n        oddStripeClassName = ODD_STRIPE_CLASS,\n    } = {}\n) => {\n    const removeStyleListener = table.addStyleListener(() => {\n        const tds = table.querySelectorAll(\"tbody tr:nth-of-type(1) td\");\n        const meta = table.getMeta(tds[0]);\n\n        if (meta) {\n            if (meta.y0 % 2 === 0) {\n                table.classList.remove(oddStripeClassName);\n                table.classList.add(evenStripeClassName);\n            } else {\n                table.classList.remove(evenStripeClassName);\n                table.classList.add(oddStripeClassName);\n            }\n        }\n    });\n\n    return () => {\n        removeStyleListener();\n        table.classList.remove(evenStripeClassName);\n        table.classList.remove(oddStripeClassName);\n    };\n};\n```\n\n## Styling\n\nFor some basic stripes, we could simply add a `.stripes` class alternating the\nstyle on `tr:nth-child(odd)` and `tr:nth-child(even)`.\n\n```css\n.stripes tbody tr:nth-child(odd) td {\n    background-color: #eaedef;\n}\n\n.stripes tbody tr:nth-child(even) td {\n    background-color: white;\n}\n```\n\nAnd a `.reverse-stripes` class that swaps the `odd` and `even` styles.\n\n```css\n.reverse-stripes tbody tr:nth-child(odd) td {\n    background-color: white;\n}\n\n.reverse-stripes tbody tr:nth-child(even) td {\n    background-color: #eaedef;\n}\n```\n\n## Appendix (Dependencies)\n\n```html\n<script src=\"/dist/umd/regular-table.js\"></script>\n<link rel=\"stylesheet\" href=\"/dist/css/material.css\" />\n```\n\n```block\nlicense: apache-2.0\n```\n\n"]}