{"version":3,"sources":["area_mouse_selection.md"],"names":[],"mappings":"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","sourcesContent":["# Rectangular Area Selection\n\nMouse area selection is a complex feature composed of a few events interacting\nwith some shared state. As users, we expect to left click a cell, hold the mouse\nbutton down, move the mouse to another cell and then release, resulting in a\ntable showing the selected region. In order to record the selected area, we will\nneed the location of the cell when the `\"mousedown\"` event is triggered and the\nlocation of the cell on `\"mouseup\"` which we will add as a coordinate pair.\n\nBy holding the `ctrlKey` or `metaKey` while making selections, our users can\nmake multiple selections show at once. Lets also add a `\"mouseover\"`\n`EventListener` to paint the selection as the user moves the mouse - showing the\nregion that would be selected on `\"mouseup\"`. Finally, we'll need to ensure that\nthe selection paints correctly as it scrolls in and out of the visible table\nusing a `StyleListener` that we will define later.\n\n# API\n\n```html\n<regular-table id=\"example_table\"></regular-table>\n```\n\nWe can load default selections to this example and wire up the `DataListener`\nborrowed from `two_billion_rows`, and then we simply `addAreaMouseSelection()`\nto the `table` and `draw()`.\n\n```html\n<script type=\"module\">\n    import { addAreaMouseSelection } from \"./area_mouse_selection.js\";\n    import { dataListener } from \"/dist/examples/two_billion_rows.js\";\n\n    window.addEventListener(\"load\", () => {\n        example_table.setDataListener(dataListener(1000, 50));\n        addAreaMouseSelection(example_table, {\n            selected: [\n                { x0: 5, x1: 7, y0: 7, y1: 11 },\n                { x0: 1, x1: 3, y0: 16, y1: 22 },\n                { x0: 7, x1: 8, y0: 15, y1: 18 },\n            ],\n        });\n        example_table.draw();\n    });\n</script>\n```\n\n## `addAreaMouseSelection()`\n\nLets start by making the area selection behavior available via a single\nfunction, `addAreaMouseSelection()`, that takes a `<regular-table>` and applies\nour behavior.\n\n```javascript\nconst PRIVATE = Symbol(\"Area Mouse Selection\");\nconst MOUSE_SELECTED_AREA_CLASS = \"mouse-selected-area\";\n\nexport const addAreaMouseSelection = (\n    table,\n    { className = MOUSE_SELECTED_AREA_CLASS, selected = [] } = {}\n) => {\n    table[PRIVATE] = { selected_areas: selected };\n    table.addEventListener(\"mousedown\", getMousedownListener(table));\n    table.addEventListener(\"mouseover\", getMouseoverListener(table, className));\n    table.addEventListener(\"mouseup\", getMouseupListener(table, className));\n    table.addStyleListener(() => applyMouseAreaSelections(table, className));\n    return table;\n};\n```\n\n## Listening to Mouse Events\n\nFor each of our mouse listeners, we'll need the `table` passed in from\n`addAreaMouseSelection()`, so we will define each as a higher-order function\ncreating a closure and keeping the `table` argument available. First we can\ncreate a `\"mousedown\"` `EventListener` by calling `getMousedownListener()` with\nthe table. The listener function `return`ed will look up the coordinates of the\n`event.target` using `getMeta()` and update the `CURRENT_MOUSEDOWN_COORDINATES`.\nIt's also responsible for clearing the previous `selected_areas` if the user\nisn't holding the `ctrl` or `metaKey`.\n\n```javascript\nconst getMousedownListener = (table) => (event) => {\n    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES = {};\n    const meta = table.getMeta(event.target);\n    if (meta && meta.x !== undefined && meta.y !== undefined) {\n        table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES = { x: meta.x, y: meta.y };\n    }\n\n    if (!event.ctrlKey && !event.metaKey) {\n        table[PRIVATE].selected_areas = [];\n    }\n};\n```\n\nThe `EventListener` returned for `\"mouseover\"` first checks that a valid\n`CURRENT_MOUSEDOWN_COORDINATES` is set and then reapplies the cell selection\nwith the `event.target`'s coordinates used to calculate the\n`potentialSelection`.\n\n```javascript\nconst getMouseoverListener = (table, className) => (event) => {\n    if (\n        table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES &&\n        table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x !== undefined\n    ) {\n        const meta = table.getMeta(event.target);\n        if (meta && meta.x !== undefined && meta.y !== undefined) {\n            const potentialSelection = {\n                x0: Math.min(\n                    meta.x,\n                    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x\n                ),\n                x1: Math.max(\n                    meta.x,\n                    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x\n                ),\n                y0: Math.min(\n                    meta.y,\n                    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y\n                ),\n                y1: Math.max(\n                    meta.y,\n                    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y\n                ),\n            };\n            applyMouseAreaSelections(\n                table,\n                className,\n                table[PRIVATE].selected_areas.concat([potentialSelection])\n            );\n        }\n    }\n};\n```\n\nSimilarly, on `\"mouseup\"` we will need to capture the coordinates of the\n`event.target` and `push()` this new selection into `selected_areas`. With our\n`selected_areas` up to date, we will reapply the selection then clear the\n`CURRENT_MOUSEDOWN_COORDINATES`.\n\n```javascript\nconst getMouseupListener = (table, className) => (event) => {\n    const meta = table.getMeta(event.target);\n    if (\n        table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES &&\n        table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x !== undefined &&\n        meta.x !== undefined &&\n        meta.y !== undefined\n    ) {\n        const selection = {\n            x0: Math.min(\n                meta.x,\n                table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x\n            ),\n            x1: Math.max(\n                meta.x,\n                table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.x\n            ),\n            y0: Math.min(\n                meta.y,\n                table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y\n            ),\n            y1: Math.max(\n                meta.y,\n                table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES.y\n            ),\n        };\n        table[PRIVATE].selected_areas.push(selection);\n        applyMouseAreaSelections(table, className);\n    }\n    table[PRIVATE].CURRENT_MOUSEDOWN_COORDINATES = {};\n};\n```\n\nOur `applyMouseAreaSelections()` will simply `remove()` the `className` from all\n`td`s in the `table` and then iterate over the `areaSelections` reapplying the\n`className`.\n\n```javascript\nexport const applyMouseAreaSelections = (table, className, selected) => {\n    const tds = table.querySelectorAll(\"tbody td\");\n    for (const td of tds) {\n        td.classList.remove(className);\n    }\n    selected = selected || table[PRIVATE].selected_areas;\n    for (const as of selected) {\n        applyMouseAreaSelection(table, as, className);\n    }\n};\n```\n\nMuch like our `MetaData` `object`, we will use `x0` and `y0` to describe the\nupper left corner and `x1` and `y1` for the lower right corner in the body of\n`applyMouseAreaSelection()`. We can iterate through the `td`s in the `table`\nadding the `className` if the `td`'s metadata falls within the rectangular\nregion defined by those coordinates.\n\n```javascript\nconst applyMouseAreaSelection = (table, { x0, x1, y0, y1 }, className) => {\n    const tds = table.querySelectorAll(\"tbody td\");\n    if (\n        x0 !== undefined &&\n        y0 !== undefined &&\n        x1 !== undefined &&\n        y1 !== undefined\n    ) {\n        for (const td of tds) {\n            const meta = table.getMeta(td);\n            if (x0 <= meta.x && meta.x <= x1) {\n                if (y0 <= meta.y && meta.y <= y1) {\n                    td.classList.add(className);\n                }\n            }\n        }\n    }\n};\n```\n\n## Styling\n\nBy default the `user-select` style is applied, lets get rid of it for our `td`s.\n\n```css\nregular-table tbody tr td {\n    user-select: none;\n}\n```\n\nAnd we'll need to style the selection to make it look nice for the end user.\n\n```css\nregular-table tbody tr td.mouse-selected-area {\n    background-color: #2771a8;\n    color: white;\n}\n```\n\n## Appendix (Dependencies)\n\n```html\n<script src=\"/dist/umd/regular-table.js\"></script>\n<link rel=\"stylesheet\" href=\"/dist/css/material.css\" />\n```\n\n```block\nlicense: apache-2.0\n```\n\n"]}