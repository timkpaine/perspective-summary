{
  "version": 3,
  "sources": ["../../../../node_modules/ws/browser.js", "../../src/js/config/constants.js", "../../src/js/config/settings.js", "../../src/js/config/index.js", "../../src/js/api/dispatch.js", "../../src/js/api/view_api.js", "../../src/js/utils.js", "../../src/js/api/table_api.js", "../../src/js/api/client.js", "../../src/js/websocket/client.js", "../../../../node_modules/fflate/esm/browser.js", "worker-stub:../../src/js/perspective.worker.js", "wasm-inline:../../dist/pkg/web/perspective.cpp.wasm", "../../src/js/perspective.browser.js"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = function() {\n  throw new Error(\n    'ws does not work in the browser. Browser clients must use the native ' +\n      'WebSocket object'\n  );\n};\n", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nexport const DATA_TYPES = {\n    integer: \"integer\",\n    float: \"float\",\n    string: \"string\",\n    boolean: \"boolean\",\n    date: \"date\",\n    datetime: \"datetime\",\n    object: \"object\",\n};\n\nexport const CONFIG_ALIASES = {\n    row_pivot: \"group_by\",\n    \"row-pivot\": \"group_by\",\n    \"row-pivots\": \"group_by\",\n    col_pivot: \"split_by\",\n    col_pivots: \"split_by\",\n    column_pivot: \"split_by\",\n    \"column-pivot\": \"split_by\",\n    \"column-pivots\": \"split_by\",\n    filters: \"filter\",\n    sorts: \"sort\",\n};\n\nexport const CONFIG_VALID_KEYS = [\n    \"viewport\",\n    \"group_by\",\n    \"split_by\",\n    \"aggregates\",\n    \"columns\",\n    \"filter\",\n    \"sort\",\n    \"computed_columns\",\n    \"expressions\",\n    \"group_by_depth\",\n    \"split_by_depth\",\n    \"filter_op\",\n];\n\nconst NUMBER_AGGREGATES = [\n    \"any\",\n    \"avg\",\n    \"abs sum\",\n    \"count\",\n    \"distinct count\",\n    \"dominant\",\n    \"first by index\",\n    \"last by index\",\n    \"last minus first\",\n    \"last\",\n    \"high\",\n    \"join\",\n    \"low\",\n    \"high minus low\",\n    \"max\",\n    \"mean\",\n    \"median\",\n    \"min\",\n    \"pct sum parent\",\n    \"pct sum grand total\",\n    \"stddev\",\n    \"sum\",\n    \"sum abs\",\n    \"sum not null\",\n    \"unique\",\n    \"var\",\n];\n\nconst STRING_AGGREGATES = [\n    \"any\",\n    \"count\",\n    \"distinct count\",\n    \"distinct leaf\",\n    \"dominant\",\n    \"first by index\",\n    \"join\",\n    \"last by index\",\n    \"last\",\n    \"unique\",\n];\n\nconst BOOLEAN_AGGREGATES = [\n    \"any\",\n    \"count\",\n    \"distinct count\",\n    \"distinct leaf\",\n    \"dominant\",\n    \"first by index\",\n    \"last by index\",\n    \"last\",\n    \"unique\",\n];\n\nexport const SORT_ORDERS = [\n    \"none\",\n    \"asc\",\n    \"desc\",\n    \"col asc\",\n    \"col desc\",\n    \"asc abs\",\n    \"desc abs\",\n    \"col asc abs\",\n    \"col desc abs\",\n];\n\nexport const SORT_ORDER_IDS = [2, 0, 1, 0, 1, 3, 4, 3, 4];\n\nexport const TYPE_AGGREGATES = {\n    string: STRING_AGGREGATES,\n    float: NUMBER_AGGREGATES,\n    integer: NUMBER_AGGREGATES,\n    boolean: BOOLEAN_AGGREGATES,\n    datetime: STRING_AGGREGATES,\n    date: STRING_AGGREGATES,\n};\n\nexport const FILTER_OPERATORS = {\n    lessThan: \"<\",\n    greaterThan: \">\",\n    equals: \"==\",\n    lessThanOrEquals: \"<=\",\n    greaterThanOrEquals: \">=\",\n    doesNotEqual: \"!=\",\n    isNull: \"is null\",\n    isNotNull: \"is not null\",\n    isIn: \"in\",\n    isNotIn: \"not in\",\n    contains: \"contains\",\n    bitwiseAnd: \"&\",\n    bitwiseOr: \"|\",\n    and: \"and\",\n    or: \"or\",\n    beginsWith: \"begins with\",\n    endsWith: \"ends with\",\n};\n\nconst BOOLEAN_FILTERS = [\n    FILTER_OPERATORS.bitwiseAnd,\n    FILTER_OPERATORS.bitwiseOr,\n    FILTER_OPERATORS.equals,\n    FILTER_OPERATORS.doesNotEqual,\n    FILTER_OPERATORS.or,\n    FILTER_OPERATORS.and,\n    FILTER_OPERATORS.isNull,\n    FILTER_OPERATORS.isNotNull,\n];\n\nconst NUMBER_FILTERS = [\n    FILTER_OPERATORS.lessThan,\n    FILTER_OPERATORS.greaterThan,\n    FILTER_OPERATORS.equals,\n    FILTER_OPERATORS.lessThanOrEquals,\n    FILTER_OPERATORS.greaterThanOrEquals,\n    FILTER_OPERATORS.doesNotEqual,\n    FILTER_OPERATORS.isNull,\n    FILTER_OPERATORS.isNotNull,\n];\n\nconst STRING_FILTERS = [\n    FILTER_OPERATORS.equals,\n    FILTER_OPERATORS.contains,\n    FILTER_OPERATORS.doesNotEqual,\n    FILTER_OPERATORS.isIn,\n    FILTER_OPERATORS.isNotIn,\n    FILTER_OPERATORS.beginsWith,\n    FILTER_OPERATORS.endsWith,\n    FILTER_OPERATORS.isNull,\n    FILTER_OPERATORS.isNotNull,\n];\n\nconst DATETIME_FILTERS = [\n    FILTER_OPERATORS.lessThan,\n    FILTER_OPERATORS.greaterThan,\n    FILTER_OPERATORS.equals,\n    FILTER_OPERATORS.lessThanOrEquals,\n    FILTER_OPERATORS.greaterThanOrEquals,\n    FILTER_OPERATORS.doesNotEqual,\n    FILTER_OPERATORS.isNull,\n    FILTER_OPERATORS.isNotNull,\n];\n\nexport const COLUMN_SEPARATOR_STRING = \"|\";\n\nexport const TYPE_FILTERS = {\n    string: STRING_FILTERS,\n    float: NUMBER_FILTERS,\n    integer: NUMBER_FILTERS,\n    boolean: BOOLEAN_FILTERS,\n    datetime: DATETIME_FILTERS,\n    date: DATETIME_FILTERS,\n};\n", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/**\n * The default settings which populate `perspective.config.js`.\n */\nexport default {\n    /**\n     * `types` are the type-specific configuration options.  Each key is the\n     * name of a perspective type; their values are configuration objects for\n     * that type.\n     */\n    types: {\n        float: {\n            /**\n             * Which filter operator should be the default when a column of this\n             * type is pivotted.\n             */\n            filter_operator: \"==\",\n\n            /**\n             * Which aggregate should be the default when a column of this type\n             * is pivotted.\n             */\n            aggregate: \"sum\",\n\n            /**\n             * The format object for this type.  Can be either an\n             * `toLocaleString()` `options` object for this type (or supertype),\n             * or a function which returns the formatted string for this type.\n             */\n            format: {\n                style: \"decimal\",\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n            },\n        },\n        string: {\n            filter_operator: \"==\",\n            aggregate: \"count\",\n        },\n        integer: {\n            filter_operator: \"==\",\n            aggregate: \"sum\",\n            format: {},\n        },\n        boolean: {\n            filter_operator: \"==\",\n            aggregate: \"count\",\n        },\n        datetime: {\n            filter_operator: \"==\",\n            aggregate: \"count\",\n            format: {\n                dateStyle: \"short\",\n                timeStyle: \"medium\",\n            },\n            null_value: -1,\n        },\n        date: {\n            filter_operator: \"==\",\n            aggregate: \"count\",\n            format: {\n                dateStyle: \"short\",\n            },\n            null_value: -1,\n        },\n    },\n};\n", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport DEFAULT_CONFIG from \"./settings.js\";\n\nexport function get_types() {\n    return Object.keys(get_config().types);\n}\n\nexport function get_type_config(type) {\n    const config = {};\n    if (get_config().types[type]) {\n        Object.assign(config, get_config().types[type]);\n    }\n    if (config.type) {\n        const props = get_type_config(config.type);\n        Object.assign(props, config);\n        return props;\n    } else {\n        return config;\n    }\n}\n\nfunction isObject(item) {\n    return item && typeof item === \"object\" && !Array.isArray(item);\n}\n\nfunction mergeDeep(target, ...sources) {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\nexport function override_config(config) {\n    if (globalThis.__PERSPECTIVE_CONFIG__) {\n        console.warn(\"Config already initialized!\");\n    }\n    globalThis.__PERSPECTIVE_CONFIG__ = mergeDeep(DEFAULT_CONFIG, config);\n}\n\nexport function get_config() {\n    if (!globalThis.__PERSPECTIVE_CONFIG__) {\n        globalThis.__PERSPECTIVE_CONFIG__ = mergeDeep(\n            DEFAULT_CONFIG,\n            globalThis.__TEMPLATE_CONFIG__ || {}\n        );\n    }\n    return globalThis.__PERSPECTIVE_CONFIG__;\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nconst __CALLBACK_CACHE__ = new WeakMap();\nlet __CALLBACK_INDEX__ = 0;\n\n/**\n * Unbind a listener to an event.\n *\n * @param {*} method\n * @param {*} cmd\n */\nexport function unsubscribe(method, cmd) {\n    return function () {\n        let resolve;\n        let reject = () => {};\n        let args = Array.prototype.slice.call(arguments, 0, arguments.length);\n        for (let i = args.length - 1; i >= 0; i--) {\n            if (typeof args[i] === \"function\") {\n                resolve = args.splice(i, 1)[0];\n            }\n        }\n        const callback_id = __CALLBACK_CACHE__.get(resolve);\n        __CALLBACK_CACHE__.delete(resolve);\n        let msg = {\n            cmd: cmd || \"view_method\",\n            name: this._name,\n            method: method,\n            args: args,\n            subscribe: true,\n            callback_id,\n        };\n        this._worker.post(msg, resolve, reject);\n        this._worker.unsubscribe(cmd, resolve);\n    };\n}\n\n/**\n * Bind a listener to an event.\n *\n * @param {*} method\n * @param {*} cmd\n */\nexport function subscribe(method, cmd) {\n    return function () {\n        let resolve;\n        let reject = () => {};\n        let args = Array.prototype.slice.call(arguments, 0, arguments.length);\n        for (let i = args.length - 1; i >= 0; i--) {\n            if (typeof args[i] === \"function\") {\n                resolve = args.splice(i, 1)[0];\n            }\n        }\n        __CALLBACK_INDEX__++;\n        __CALLBACK_CACHE__.set(resolve, __CALLBACK_INDEX__);\n        let msg = {\n            cmd: cmd || \"view_method\",\n            name: this._name,\n            method: method,\n            args: args,\n            subscribe: true,\n            callback_id: __CALLBACK_INDEX__,\n        };\n        this._worker.post(msg, resolve, reject, true);\n    };\n}\n\n/**\n * Add a method call to the queue, preparing it for execution.\n *\n * Returns a bound function that calls the desired method on the server.\n *\n * @param {*} method\n * @param {*} cmd\n */\nexport function async_queue(method, cmd) {\n    return function () {\n        var args = Array.prototype.slice.call(arguments, 0, arguments.length);\n        return new Promise(\n            function (resolve, reject) {\n                var msg = {\n                    cmd: cmd || \"view_method\",\n                    name: this._name,\n                    method: method,\n                    args: args,\n                    subscribe: false,\n                };\n                this._worker.post(msg, resolve, reject);\n            }.bind(this)\n        );\n    };\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport { subscribe, unsubscribe, async_queue } from \"./dispatch.js\";\n\n/**\n * Construct a proxy for the view object by creating a \"view\" message and\n * sending it through the worker.\n *\n * @param {*} worker\n * @param {*} table_name\n * @param {*} config\n */\nexport function view(worker, table_name, config) {\n    return new Promise((resolve, reject) => {\n        this._worker = worker;\n        this._name = Math.random() + \"\";\n\n        this._worker.post(\n            {\n                cmd: \"view\",\n                view_name: this._name,\n                table_name: table_name,\n                config: config,\n            },\n            () => {\n                // Resolve the Promise with this function, which is a proxy\n                // view that dispatches all view methods to the backend, i.e.\n                // a Web Worker or a Python/Node Perspective server. Because\n                // arrow functions automatically capture `this` from the\n                // surrounding scope, there is no need to explicitly bind the\n                // resolving value to `this`.\n                resolve(this);\n            },\n            reject\n        );\n\n        if (\n            this._worker._initialized === true &&\n            !this._worker._features?.wait_for_response\n        ) {\n            resolve(this);\n        }\n    });\n}\n\n/**\n * Create a reference to a view located on `worker` for use by remote clients.\n *\n * @param {worker} worker the Web Worker at which the view is located.\n * @param {String} name a unique name for the view.\n */\nexport function proxy_view(worker, name) {\n    this._worker = worker;\n    this._name = name;\n}\n\nproxy_view.prototype = view.prototype;\n\n// Send view methods that do not create new objects (getters, setters etc.) to\n// the queue for processing.\n\nview.prototype.get_config = async_queue(\"get_config\");\n\nview.prototype.get_min_max = async_queue(\"get_min_max\");\n\nview.prototype.to_json = async_queue(\"to_json\");\n\nview.prototype.to_arrow = async_queue(\"to_arrow\");\n\nview.prototype.to_columns = async_queue(\"to_columns\");\n\nview.prototype.to_csv = async_queue(\"to_csv\");\n\nview.prototype.schema = async_queue(\"schema\");\n\nview.prototype.expression_schema = async_queue(\"expression_schema\");\n\nview.prototype.column_paths = async_queue(\"column_paths\");\n\nview.prototype.num_columns = async_queue(\"num_columns\");\n\nview.prototype.num_rows = async_queue(\"num_rows\");\n\nview.prototype.dimensions = async_queue(\"dimensions\");\n\nview.prototype.set_depth = async_queue(\"set_depth\");\n\nview.prototype.get_row_expanded = async_queue(\"get_row_expanded\");\n\nview.prototype.expand = async_queue(\"expand\");\n\nview.prototype.collapse = async_queue(\"collapse\");\n\nview.prototype.delete = async_queue(\"delete\");\n\nview.prototype.col_to_js_typed_array = async_queue(\"col_to_js_typed_array\");\n\nview.prototype.on_update = subscribe(\"on_update\", \"view_method\", true);\n\nview.prototype.remove_update = unsubscribe(\n    \"remove_update\",\n    \"view_method\",\n    true\n);\n\nview.prototype.on_delete = subscribe(\"on_delete\", \"view_method\", true);\n\nview.prototype.remove_delete = unsubscribe(\n    \"remove_delete\",\n    \"view_method\",\n    true\n);\n", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/**\n * Gets human-readable types for a column\n * @private\n * @returns {string}\n */\nexport function get_column_type(val) {\n    if (val >= 1 && val <= 8) {\n        return \"integer\";\n    } else if (val === 19) {\n        return \"string\";\n    } else if (val === 10 || val === 9) {\n        return \"float\";\n    } else if (val === 11) {\n        return \"boolean\";\n    } else if (val === 12) {\n        return \"datetime\";\n    } else if (val === 13) {\n        return \"date\";\n    } else {\n        console.warn(\n            `Unknown type for value ${val} with JS type ${typeof val}`\n        );\n    }\n}\n\n/**\n * Bind all methods in a class to the class instance.  It is sad that this is\n * necessary.\n *\n * @export\n * @param {*} self\n */\nexport function bindall(self) {\n    let obj = self;\n    do {\n        for (const key of Object.getOwnPropertyNames(obj)) {\n            const value = self[key];\n            if (key !== \"constructor\" && typeof value === \"function\") {\n                self[key] = value.bind(self);\n            }\n        }\n    } while ((obj = obj !== Object && Object.getPrototypeOf(obj)));\n}\n\n/**\n * Detect Node.js.\n *\n * Returns\n * -------\n * True if the current script is running in Node.js.\n */\nexport function detectNode() {\n    return typeof window === \"undefined\";\n}\n\n/**\n * Detect Chrome.\n *\n * Returns\n * -------\n * Detect if the current script is running in Chrome.\n */\nexport function detectChrome() {\n    var isChromium = window.chrome,\n        winNav = window.navigator,\n        vendorName = winNav.vendor,\n        isOpera = winNav.userAgent.indexOf(\"OPR\") > -1,\n        isIEedge = winNav.userAgent.indexOf(\"Edge\") > -1,\n        isIOSChrome = winNav.userAgent.match(\"CriOS\");\n\n    if (isIOSChrome) {\n        return true;\n    } else if (\n        isChromium !== null &&\n        typeof isChromium !== \"undefined\" &&\n        vendorName === \"Google Inc.\" &&\n        isOpera === false &&\n        isIEedge === false\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// https://github.com/kripken/emscripten/issues/6042\nexport function detect_iphone() {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n}\n\n/**\n * String.includes() polyfill\n */\nif (!String.prototype.includes) {\n    String.prototype.includes = function (search, start) {\n        if (typeof start !== \"number\") {\n            start = 0;\n        }\n\n        if (start + search.length > this.length) {\n            return false;\n        } else {\n            return this.indexOf(search, start) !== -1;\n        }\n    };\n}\n\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, \"includes\", {\n        value: function (searchElement, fromIndex) {\n            if (this == null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n\n            // 1. Let O be ? ToObject(this value).\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) {\n                return false;\n            }\n\n            // 4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined,\n            //    this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n \u2265 0, then a. Let k be n.\n            // 6. Else n < 0, a. Let k be len + n. b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return (\n                    x === y ||\n                    (typeof x === \"number\" &&\n                        typeof y === \"number\" &&\n                        isNaN(x) &&\n                        isNaN(y))\n                );\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)). b.\n                // If SameValueZero(searchElement, elementK) is true, return\n                // true.\n                if (sameValueZero(o[k], searchElement)) {\n                    return true;\n                }\n                // c. Increase k by 1.\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        },\n    });\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport { unsubscribe, subscribe, async_queue } from \"./dispatch.js\";\nimport { view } from \"./view_api.js\";\nimport { bindall } from \"../utils.js\";\n\n/**\n * Construct a proxy for the table object by creating a \"table\" message and\n * sending it through the worker.\n *\n * @param {*} worker\n * @param {*} data\n * @param {*} options\n */\nexport function table(worker, data, options) {\n    return new Promise((resolve, reject) => {\n        this._worker = worker;\n        this._name = options.name || Math.random() + \"\";\n\n        bindall(this);\n\n        if (data.to_arrow) {\n            this._worker.post({\n                cmd: \"table\",\n                name: this._name,\n                args: [],\n                options: options || {},\n            });\n            data.to_arrow().then((arrow) => {\n                this._worker.post(\n                    {\n                        cmd: \"table\",\n                        name: this._name,\n                        args: [arrow],\n                        options: options || {},\n                    },\n                    () => {\n                        data.on_update(\n                            (updated) => {\n                                this.update(updated.delta);\n                            },\n                            { mode: \"row\" }\n                        );\n                        resolve(this);\n                    },\n                    reject\n                );\n            });\n        } else {\n            this._worker.post(\n                {\n                    cmd: \"table\",\n                    name: this._name,\n                    args: [data],\n                    options: options || {},\n                },\n                () => {\n                    resolve(this);\n                },\n                reject\n            );\n        }\n\n        if (\n            this._worker._initialized === true &&\n            !this._worker._features?.wait_for_response\n        ) {\n            resolve(this);\n        }\n    });\n}\n\ntable.prototype.type = \"table\";\n\n/**\n * Create a reference to a Perspective table at `worker` for use by remote\n * clients.\n *\n * @param {worker} worker the Web Worker at which the table is located.\n * @param {String} name a unique name for the table.\n */\nexport function proxy_table(worker, name) {\n    this._worker = worker;\n    this._name = name;\n}\n\nproxy_table.prototype = table.prototype;\n\n// Dispatch table methods that create new objects to the worker\ntable.prototype.view = function (config) {\n    return new view(this._worker, this._name, config);\n};\n\ntable.prototype.query_columns = async_queue(\"query_columns\", \"table_method\");\n\n// Dispatch table methods that do not create new objects (getters, setters etc.)\n// to the queue for processing.\ntable.prototype.get_index = async_queue(\"get_index\", \"table_method\");\n\ntable.prototype.get_limit = async_queue(\"get_limit\", \"table_method\");\n\ntable.prototype.make_port = async_queue(\"make_port\", \"table_method\");\n\ntable.prototype.remove_port = async_queue(\"remove_port\", \"table_method\");\n\ntable.prototype.schema = async_queue(\"schema\", \"table_method\");\n\ntable.prototype.validate_expressions = async_queue(\n    \"validate_expressions\",\n    \"table_method\"\n);\n\ntable.prototype.is_valid_filter = async_queue(\n    \"is_valid_filter\",\n    \"table_method\"\n);\n\ntable.prototype.size = async_queue(\"size\", \"table_method\");\n\ntable.prototype.num_rows = async_queue(\"num_rows\", \"table_method\");\n\ntable.prototype.num_columns = async_queue(\"num_columns\", \"table_method\");\n\ntable.prototype.columns = async_queue(\"columns\", \"table_method\");\n\ntable.prototype.clear = async_queue(\"clear\", \"table_method\");\n\ntable.prototype.replace = async_queue(\"replace\", \"table_method\");\n\ntable.prototype.delete = async_queue(\"delete\", \"table_method\");\n\ntable.prototype.on_delete = subscribe(\"on_delete\", \"table_method\", true);\n\ntable.prototype.remove = async_queue(\"remove\", \"table_method\");\n\ntable.prototype.remove_delete = unsubscribe(\n    \"remove_delete\",\n    \"table_method\",\n    true\n);\n\ntable.prototype.update = function (data, options) {\n    return new Promise((resolve, reject) => {\n        this._worker.post(\n            {\n                name: this._name,\n                cmd: \"table_method\",\n                method: \"update\",\n                args: [data, options || {}],\n            },\n            resolve,\n            reject,\n            false\n        );\n    });\n};\n\ntable.prototype.execute = function (f) {\n    this._worker.post({\n        cmd: \"table_execute\",\n        name: this._name,\n        f: f.toString(),\n    });\n};\n", "/******************************************************************************\n *\n * Copyright (c) 2019, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport { table, proxy_table } from \"./table_api.js\";\nimport { bindall } from \"../utils.js\";\n\n/**\n * Perspective's worker API handles and processes asynchronous messages,\n * interfacing with the Perspective host class.  Child classes must implement\n * the `send()` interface, which defines how messages are dispatched in\n * different contexts.  `handlers` is a dictionary of resolve/reject callbacks\n * for each method the worker receives.\n *\n * @export\n */\nexport class Client {\n    constructor() {\n        this._initialized = false;\n        this._worker = {\n            initialized: { value: false },\n            transferable: false,\n            msg_id: 0,\n            handlers: {},\n            messages: [],\n        };\n        bindall(this);\n    }\n\n    /**\n     * Remove a listener for a Perspective-generated event.\n     */\n    unsubscribe(cmd, handler) {\n        for (let key of Object.keys(this._worker.handlers)) {\n            if (this._worker.handlers[key].resolve === handler) {\n                delete this._worker.handlers[key];\n            }\n        }\n    }\n\n    /**\n     * Send a message to the server.\n     */\n    post(msg, resolve, reject, keep_alive = false) {\n        ++this._worker.msg_id;\n        if (resolve || reject) {\n            this._worker.handlers[this._worker.msg_id] = {\n                resolve,\n                reject,\n                keep_alive,\n            };\n        }\n        msg.id = this._worker.msg_id;\n        if (this._worker.initialized.value) {\n            this.send(msg);\n        } else {\n            this._worker.messages.push(() => {\n                this.send(msg);\n\n                if (\n                    (msg.cmd === \"table\" || msg.cmd === \"view\") &&\n                    !this._features?.wait_for_response &&\n                    resolve\n                ) {\n                    resolve();\n                }\n            });\n        }\n    }\n\n    /**\n     * Snapshots memory usage from the WebWorker or Node.js process, with the\n     * addition of `wasmHeap` Emscripten's linear memory\n     * @async\n     * @returns {MemoryUsage}\n     */\n    async memory_usage() {\n        return await new Promise((resolve, reject) => {\n            this.post({ cmd: \"memory_usage\" }, resolve, reject);\n        });\n    }\n\n    initialize_profile_thread() {\n        if (this._worker.initialized.value) {\n            this.send({ id: -1, cmd: \"init_profile_thread\" });\n        } else {\n            this._worker.messages.push(() =>\n                this.send({ id: -1, cmd: \"init_profile_thread\" })\n            );\n        }\n    }\n\n    /**\n     * Must be implemented in order to transport commands to the server.\n     */\n    send() {\n        throw new Error(\"send() not implemented\");\n    }\n\n    /**\n     * Given the name of a table that is hosted on the server (e.g. using\n     * `perspective-python` or `perspective` in NodeJS), return a `table`\n     * instance that sends all operations and instructions to the `table` on the\n     * server.\n     *\n     * @param {string} name\n     */\n    async open_table(name) {\n        return new proxy_table(this, name);\n    }\n\n    /**\n     * Receive a message from the server, and resolve/reject the promise that\n     * is awaiting the content of the message.\n     */\n    _handle(e) {\n        if (!this._worker.initialized.value) {\n            if (!this._initialized) {\n                this._initialized = true;\n            }\n\n            const msgs = this._worker.messages;\n            this._worker.initialized.value = true;\n            this._worker.messages = [];\n\n            // If the `data` attribute of the init message is set, then\n            // set the `features` dictionary with the flags from the server.\n            if (e.data?.data) {\n                this._features = {};\n\n                for (const feature of e.data.data) {\n                    this._features[feature] = true;\n                }\n            }\n\n            if (msgs) {\n                for (const m in msgs) {\n                    if (msgs.hasOwnProperty(m)) {\n                        msgs[m]();\n                    }\n                }\n            }\n        }\n\n        if (e.data.id) {\n            const handler = this._worker.handlers[e.data.id];\n\n            if (handler) {\n                if (e.data.error) {\n                    handler.reject(e.data.error);\n                } else {\n                    handler.resolve(e.data.data);\n                }\n\n                if (!handler.keep_alive) {\n                    delete this._worker.handlers[e.data.id];\n                }\n            }\n        }\n    }\n\n    table(data, options) {\n        return new table(this, data, options || {});\n    }\n\n    terminate() {\n        this._worker.terminate();\n        this._worker = undefined;\n    }\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\nimport { Client } from \"../api/client.js\";\nimport WebSocket from \"ws\";\n\n// Initiate a `ping` to the server every 30 seconds\nconst PING_TIMEOUT = 30000;\nexport class WebSocketClient extends Client {\n    _ping() {\n        this._ping_loop && this._ws.send(\"ping\");\n        this._ping_loop = setTimeout(this._ping.bind(this), PING_TIMEOUT);\n    }\n\n    _close() {\n        clearTimeout(this._ping_loop);\n        this._ping_loop = undefined;\n        this._on_close_callback?.();\n    }\n\n    _onmessage(msg) {\n        if (msg.data === \"pong\") {\n            return;\n        }\n\n        if (this._pending_binary) {\n            // Process a binary being sent by the server, which\n            // can decide how many chunks to send and the size of each\n            // chunk.\n            let binary_msg = msg.data;\n\n            this._full_binary.set(\n                new Uint8Array(binary_msg),\n                this._total_chunk_length\n            );\n            this._total_chunk_length += binary_msg.byteLength;\n\n            // Use the total length of the binary from the pre-message\n            // to decide when to stop waiting for new chunks from the\n            // server.\n            if (this._total_chunk_length === this._pending_binary_length) {\n                // Chunking is complete and the binary has been received\n                // in full.\n                binary_msg = this._full_binary.buffer;\n            } else {\n                // Wait for another chunk.\n                return;\n            }\n\n            let result = {\n                data: {\n                    id: this._pending_binary,\n                    data: binary_msg,\n                },\n            };\n\n            // make sure on_update callbacks are called with a `port_id`\n            // AND the transferred binary.\n            if (this._pending_port_id !== undefined) {\n                const new_data_with_port_id = {\n                    port_id: this._pending_port_id,\n                    delta: binary_msg,\n                };\n                result.data.data = new_data_with_port_id;\n            }\n\n            // Send the joined message to the client for handling.\n            this._handle(result);\n\n            // Reset flags to end special message flow.\n            delete this._pending_binary;\n            delete this._pending_binary_length;\n            delete this._pending_port_id;\n\n            this._total_chunk_length = 0;\n            this._full_binary = null;\n        } else {\n            msg = JSON.parse(msg.data);\n\n            // If the message has `binary_length` set,the worker expects the\n            // next message to be a binary message. This sets the\n            // `_pending_binary` flag, which triggers a special handler for\n            // the ArrayBuffer containing binary data.\n            if (msg.binary_length) {\n                this._pending_binary = msg.id;\n                this._pending_binary_length = msg.binary_length;\n\n                // Check whether the message also contains a `port_id`,\n                // indicating that we are in an `on_update` callback and\n                // the pending binary needs to be joined with the port_id\n                // for on_update handlers to work properly.\n                if (msg.data && msg.data.port_id !== undefined) {\n                    this._pending_port_id = msg.data.port_id;\n                }\n\n                // Create an empty ArrayBuffer to hold the binary, as it\n                // will be sent in n >= 1 chunks.\n                this._full_binary = new Uint8Array(this._pending_binary_length);\n            } else {\n                this._handle({\n                    data: msg,\n                });\n            }\n        }\n    }\n\n    constructor(ws) {\n        super();\n        this._ws = ws;\n        this._ws.binaryType = \"arraybuffer\";\n        this._full_binary;\n        this._total_chunk_length = 0;\n        this._pending_binary_length = 0;\n\n        this._ws.onopen = () => {\n            this.send({\n                id: -1,\n                cmd: \"init\",\n            });\n        };\n\n        this._ping();\n        this._ws.onclose = this._close.bind(this);\n        this._ws.onmessage = this._onmessage.bind(this);\n    }\n\n    /**\n     * Send a message to the server, checking whether the arguments contain an\n     * ArrayBuffer.\n     *\n     * @param {Object} msg a message to send to the remote. If the `args`\n     * param contains an ArrayBuffer, two messages will be sent - a pre-message\n     * with the `binary_length` flag set to true, and a second message\n     * containing the ArrayBuffer. This allows for transport of metadata\n     * alongside an ArrayBuffer, and the pattern should be implemented by the\n     * receiver.\n     */\n    send(msg) {\n        if (this._ws.readyState === WebSocket.CLOSED) {\n            console.warn(\"Websocket connection is already closed.\");\n            return;\n        }\n\n        if (\n            msg.args &&\n            msg.args.length > 0 &&\n            msg.args[0] instanceof ArrayBuffer &&\n            msg.args[0].byteLength !== undefined\n        ) {\n            const pre_msg = msg;\n            msg.binary_length = msg.args[0].byteLength;\n            this._ws.send(JSON.stringify(pre_msg));\n            this._ws.send(msg.args[0]);\n            return;\n        }\n        this._ws.send(JSON.stringify(msg));\n    }\n\n    terminate() {\n        return new Promise((resolve) => {\n            this._on_close_callback = resolve;\n            this._ws.close();\n        });\n    }\n}\n", "// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos >> 3] = lst;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if (d[1] & 32)\n        err(6, 'invalid zlib data: preset dictionaries not supported');\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                err(6, 'invalid gzip data');\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            err(8);\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, new u8(su)));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n", "\n                        import worker from \"../../src/js/perspective.worker.js\";\n                        function make_host(a, b) {\n                            function addEventListener(type, callback) {\n                                a.push(callback);\n                            }\n\n                            function postMessage(msg) {\n                                if (Object.keys(msg).length > 0) {\n                                    for (const listener of b) {\n                                        listener({data: msg});\n                                    }\n                                }\n                            }\n\n                            return {\n                                addEventListener,\n                                postMessage,\n                                location: {href: \"\"}\n                            }\n                        }\n\n                        function run_single_threaded(code, e) {\n                            console.error(\"Running perspective in single-threaded mode due to error initializing Web Worker:\", e);\n                            let f = Function(\"const self = arguments[0];\" + code);\n                            const workers = [];\n                            const mains = [];\n                            f(make_host(workers, mains));\n                            return make_host(mains, workers);\n                        }\n\n                        export const initialize = async function () {\n                            try {\n                                const blob = new Blob([worker], {type: 'application/javascript'});\n                                const url = URL.createObjectURL(blob);\n                                return new Worker(url, {type: \"module\"});\n                            } catch (e) {\n                                if (window.location.protocol.startsWith(\"file\")) {\n                                    console.warn(\"file:// protocol does not support Web Workers\");\n                                } else {\n                                    console.error(\"Error instantiating Web Worker\");\n                                }\n    \n                                return run_single_threaded(worker, e);\n                            }\n                        };\n\n                        export default initialize;\n                    ", "\n                    import wasm from \"../../dist/pkg/web/perspective.cpp.wasm\";\n                    export default Promise.resolve(wasm);\n                ", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\nimport * as defaults from \"./config/constants.js\";\nimport { get_config, get_type_config as _get_type_config } from \"./config\";\nimport { Client } from \"./api/client.js\";\nimport { WebSocketClient } from \"./websocket/client\";\n\nimport { override_config } from \"./config/index.js\";\nimport { Decompress } from \"fflate\";\n\nimport wasm_worker from \"../../src/js/perspective.worker.js\";\nimport wasm from \"../../dist/pkg/web/perspective.cpp.wasm\";\n\nlet IS_INLINE = false;\n\nfunction is_gzip(buffer) {\n    return new Uint32Array(buffer.slice(0, 4))[0] == 559903;\n}\n\n/**\n * Singleton WASM file download cache.\n */\nconst _override = /* @__PURE__ */ (function () {\n    let _instance;\n    return function () {\n        if (!_instance) {\n            _instance = new (class {\n                async worker() {\n                    return await wasm_worker();\n                }\n\n                async wasm() {\n                    let _wasm = await wasm;\n\n                    let parts = [];\n                    let length = 0;\n                    const decompressor = new Decompress((chunk) => {\n                        if (chunk) {\n                            length += chunk.byteLength;\n                            parts.push(chunk);\n                        }\n                    });\n\n                    if (_wasm instanceof ArrayBuffer && !_wasm.buffer) {\n                        _wasm = new Uint8Array(_wasm);\n                    }\n\n                    if (_wasm.buffer && _wasm.buffer instanceof ArrayBuffer) {\n                        IS_INLINE = true;\n                        if (is_gzip(_wasm.buffer)) {\n                            decompressor.push(_wasm, true);\n                        } else {\n                            length = _wasm.byteLength;\n                            parts = [_wasm];\n                        }\n                    } else if (_wasm instanceof ArrayBuffer) {\n                        length = _wasm.byteLength;\n                        parts = [new Uint8Array(_wasm)];\n                    } else {\n                        const resp = await fetch(_wasm);\n                        const reader = resp.body.getReader();\n                        let state = 0;\n                        while (true) {\n                            const { value, done } = await reader.read();\n                            if (done) break;\n                            if (\n                                (state === 0 && is_gzip(value.buffer)) ||\n                                state === 1\n                            ) {\n                                state = 1;\n                                decompressor.push(value, done);\n                            } else {\n                                state = 2;\n                                length += value.byteLength;\n                                parts.push(value);\n                            }\n                        }\n                    }\n\n                    let offset = 0;\n                    const buffer = new Uint8Array(length);\n                    for (const part of parts) {\n                        buffer.set(part, offset);\n                        offset += part.byteLength;\n                    }\n                    this._wasm = buffer.buffer;\n                    return this._wasm;\n                }\n            })();\n        }\n\n        return _instance;\n    };\n})();\n\n/**\n * WebWorker extends Perspective's `worker` class and defines interactions using\n * the WebWorker API.\n *\n * This class serves as the client API for transporting messages to/from Web\n * Workers.\n */\nclass WebWorkerClient extends Client {\n    constructor(config) {\n        if (config) {\n            override_config(config);\n        }\n        super();\n        this.register();\n    }\n\n    /**\n     * When the worker is created, load either the ASM or WASM bundle depending\n     * on WebAssembly compatibility.  Don't use transferrable so multiple\n     * workers can be instantiated.\n     */\n    async register() {\n        let _worker;\n        const msg = { cmd: \"init\", config: get_config() };\n        if (typeof WebAssembly === \"undefined\") {\n            throw new Error(\"WebAssembly not supported.\");\n        } else {\n            [_worker, msg.buffer] = await Promise.all([\n                _override().worker(),\n                _override().wasm(),\n            ]);\n        }\n        for (var key in this._worker) {\n            _worker[key] = this._worker[key];\n        }\n        this._worker = _worker;\n        this._worker.addEventListener(\"message\", this._handle.bind(this));\n        this._worker.postMessage(msg);\n        this._detect_transferable();\n    }\n\n    /**\n     * Send a message from the worker, using transferables if necessary.\n     *\n     * @param {*} msg\n     */\n    send(msg) {\n        if (\n            this._worker.transferable &&\n            msg.args &&\n            msg.args[0] instanceof ArrayBuffer\n        ) {\n            this._worker.postMessage(msg, [msg.args[0]]);\n        } else {\n            this._worker.postMessage(msg);\n        }\n    }\n\n    terminate() {\n        this._worker.terminate();\n        this._worker = undefined;\n    }\n\n    get transferable() {\n        return this._worker?.transferable || false;\n    }\n\n    get inline() {\n        return IS_INLINE;\n    }\n\n    _detect_transferable() {\n        var ab = new ArrayBuffer(1);\n        this._worker.postMessage(ab, [ab]);\n        this._worker.transferable = ab.byteLength === 0;\n    }\n}\n\n/******************************************************************************\n *\n * Web Worker Singleton\n *\n */\n\nconst WORKER_SINGLETON = /* @__PURE__ */ (function () {\n    let __WORKER__, __CONFIG__;\n    return {\n        getInstance: function (config) {\n            if (__WORKER__ === undefined) {\n                __WORKER__ = new WebWorkerClient(config);\n            }\n            const config_str = JSON.stringify(config);\n            if (__CONFIG__ && config_str !== __CONFIG__) {\n                throw new Error(\n                    `Configuration object for shared_worker() has changed - this is probably a bug in your application.`\n                );\n            }\n            __CONFIG__ = config_str;\n            return __WORKER__;\n        },\n    };\n})();\n\nexport const get_type_config = _get_type_config;\n\nexport function override(x) {\n    return _override().set(x);\n}\n\n/**\n * Create a new WebWorkerClient instance.\n * @param {*} [config] An optional perspective config object override\n */\nexport function worker(config) {\n    return new WebWorkerClient(config);\n}\n\n/**\n * Create a new WebSocketClient instance. The `url` parameter is provided,\n * load the worker at `url` using a WebSocket. s\n * @param {*} url Defaults to `window.location.origin`\n * @param {*} [config] An optional perspective config object override\n */\nexport function websocket(url = window.location.origin.replace(\"http\", \"ws\")) {\n    return new WebSocketClient(new WebSocket(url));\n}\n\n/**\n * Return the shared worker, the original WebWorkerClient created during module\n * load.\n * @param {*} [config] An optional perspective config object override\n */\nexport function shared_worker(config) {\n    return WORKER_SINGLETON.getInstance(config);\n}\n\nexport default {\n    override,\n    worker,\n    websocket,\n    shared_worker,\n    ...Object.keys(defaults),\n};\n"],
  "mappings": "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",
  "names": ["require_browser", "__commonJSMin", "exports", "module", "constants_exports", "__export", "COLUMN_SEPARATOR_STRING", "CONFIG_ALIASES", "CONFIG_VALID_KEYS", "DATA_TYPES", "FILTER_OPERATORS", "SORT_ORDERS", "SORT_ORDER_IDS", "TYPE_AGGREGATES", "TYPE_FILTERS", "NUMBER_AGGREGATES", "STRING_AGGREGATES", "BOOLEAN_AGGREGATES", "BOOLEAN_FILTERS", "NUMBER_FILTERS", "STRING_FILTERS", "DATETIME_FILTERS", "settings_default", "get_type_config", "type", "config", "get_config", "props", "isObject", "item", "mergeDeep", "target", "sources", "source", "key", "override_config", "settings_default", "__CALLBACK_CACHE__", "__CALLBACK_INDEX__", "unsubscribe", "method", "cmd", "resolve", "reject", "args", "i", "callback_id", "msg", "subscribe", "async_queue", "view", "worker", "table_name", "config", "resolve", "reject", "proxy_view", "name", "async_queue", "subscribe", "unsubscribe", "bindall", "self", "obj", "key", "value", "search", "start", "searchElement", "fromIndex", "o", "len", "n", "k", "sameValueZero", "x", "y", "table", "worker", "data", "options", "resolve", "reject", "bindall", "arrow", "updated", "proxy_table", "name", "config", "view", "async_queue", "subscribe", "unsubscribe", "f", "Client", "bindall", "cmd", "handler", "key", "msg", "resolve", "reject", "keep_alive", "name", "proxy_table", "msgs", "feature", "m", "data", "options", "table", "import_ws", "PING_TIMEOUT", "WebSocketClient", "Client", "msg", "binary_msg", "result", "new_data_with_port_id", "ws", "WebSocket", "pre_msg", "resolve", "u8", "u16", "u32", "fleb", "fdeb", "clim", "freb", "eb", "start", "b", "i", "r", "j", "_a", "fl", "revfl", "_b", "fd", "revfd", "rev", "hMap", "cd", "mb", "s", "l", "le", "co", "rvb", "sv", "r_1", "v", "m", "flt", "fdt", "flrm", "hMap", "flt", "fdrm", "hMap", "fdt", "max", "a", "m", "i", "bits", "d", "p", "o", "bits16", "shft", "slc", "v", "s", "e", "u16", "u32", "u8", "ec", "err", "ind", "msg", "nt", "e", "inflt", "dat", "buf", "st", "sl", "u8", "noBuf", "noSt", "cbuf", "l", "bl", "nbuf", "final", "pos", "bt", "lm", "dm", "lbt", "dbt", "tbts", "bits", "type", "flrm", "fdrm", "hLit", "hcLen", "tl", "ldt", "clt", "i", "clim", "clb", "max", "clbmsk", "clm", "hMap", "r", "s", "c", "n", "lt", "dt", "shft", "t", "lms", "dms", "lpos", "bits16", "sym", "add", "b", "fleb", "fl", "d", "dsym", "fd", "fdeb", "end", "slc", "et", "u8", "gzs", "d", "err", "flg", "st", "zs", "Inflate", "cb", "u8", "c", "err", "l", "final", "bts", "dt", "inflt", "slc", "chunk", "Gunzip", "cb", "Inflate", "chunk", "final", "s", "gzs", "err", "Unzlib", "cb", "Inflate", "chunk", "final", "err", "Decompress", "cb", "Gunzip", "Inflate", "Unzlib", "chunk", "final", "err", "u8", "_this_1", "td", "tds", "et", "make_host", "a", "b", "addEventListener", "type", "callback", "postMessage", "msg", "listener", "run_single_threaded", "code", "f", "workers", "mains", "initialize", "blob", "perspective_worker_default", "url", "e", "perspective_cpp_default", "IS_INLINE", "is_gzip", "buffer", "_override", "_instance", "perspective_worker_default", "_wasm", "perspective_cpp_default", "parts", "length", "decompressor", "Decompress", "chunk", "reader", "state", "value", "done", "offset", "part", "WebWorkerClient", "Client", "config", "override_config", "_worker", "msg", "get_config", "key", "ab", "WORKER_SINGLETON", "__WORKER__", "__CONFIG__", "config_str", "get_type_config", "override", "x", "worker", "websocket", "url", "WebSocketClient", "shared_worker", "perspective_browser_default", "constants_exports"]
}
